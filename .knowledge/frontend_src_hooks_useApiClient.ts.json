{"is_source_file": true, "format": "TypeScript", "description": "This file defines a custom React hook 'useApiClient' that provides wrapped API client methods with error handling and notification integration. It facilitates communication with backend services, manages error responses, and exposes API methods for various operations such as authentication, Jira, Confluence, and health checks.", "external_files": ["../services/api", "../contexts/AppContext"], "external_methods": ["apiClient.startJiraOAuth", "apiClient.startConfluenceOAuth", "apiClient.handleJiraOAuthCallback", "apiClient.handleConfluenceOAuthCallback", "apiClient.authenticateJiraWithToken", "apiClient.authenticateConfluenceWithToken", "apiClient.logout", "apiClient.getJiraProjects", "apiClient.getJiraProjectDetails", "apiClient.validateJiraConnection", "apiClient.getConfluenceSpaces", "apiClient.getConfluenceSpaceDetails", "apiClient.getConfluenceSpaceContent", "apiClient.validateConfluenceConnection", "apiClient.healthCheck"], "published": [], "classes": [], "methods": [{"name": "export function useApiClient() { useApiClient", "description": "Custom React hook providing API interface with error handling for backend operations.", "scope": "", "scopeKind": ""}, {"name": "handleApiError", "description": "Handles errors from API calls, displaying notifications based on error type and status."}, {"name": "executeWithErrorHandling", "description": "Wraps async API calls to handle errors uniformly and return null on failure."}], "calls": ["useCallback", "app.addNotification", "console.error", "apiClient.startJiraOAuth", "apiClient.startConfluenceOAuth", "apiClient.handleJiraOAuthCallback", "apiClient.handleConfluenceOAuthCallback", "apiClient.authenticateJiraWithToken", "apiClient.authenticateConfluenceWithToken", "apiClient.logout", "apiClient.getJiraProjects", "apiClient.getJiraProjectDetails", "apiClient.validateJiraConnection", "apiClient.getConfluenceSpaces", "apiClient.getConfluenceSpaceDetails", "apiClient.getConfluenceSpaceContent", "apiClient.validateConfluenceConnection", "apiClient.healthCheck"], "search-terms": ["useApiClient", "error handling", "Jira OAuth", "Confluence OAuth", "apiClient", "useCallback", "notification", "React hooks"], "state": 2, "file_id": 44, "knowledge_revision": 139, "git_revision": "", "ctags": [{"_type": "tag", "name": "UseApiClientReturn", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170960/frontend/src/hooks/useApiClient.ts", "pattern": "/^export type UseApiClientReturn = ReturnType<typeof useApiClient>;$/", "language": "TypeScript", "kind": "alias"}, {"_type": "tag", "name": "api", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170960/frontend/src/hooks/useApiClient.ts", "pattern": "/^  const api = {$/", "language": "TypeScript", "kind": "constant", "scope": "useApiClient", "scopeKind": "function"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170960/frontend/src/hooks/useApiClient.ts", "pattern": "/^  const app = useApp();$/", "language": "TypeScript", "kind": "constant", "scope": "useApiClient", "scopeKind": "function"}, {"_type": "tag", "name": "executeWithErrorHandling", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170960/frontend/src/hooks/useApiClient.ts", "pattern": "/^  const executeWithErrorHandling = useCallback(async <T>($/", "language": "TypeScript", "kind": "constant", "scope": "useApiClient", "scopeKind": "function"}, {"_type": "tag", "name": "handleApiError", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170960/frontend/src/hooks/useApiClient.ts", "pattern": "/^  const handleApiError = useCallback((error: Error, operation: string) => {$/", "language": "TypeScript", "kind": "constant", "scope": "useApiClient", "scopeKind": "function"}, {"_type": "tag", "name": "useApiClient", "path": "/home/kavia/workspace/code-generation/unified-jira-confluence-dashboard-170950-170960/frontend/src/hooks/useApiClient.ts", "pattern": "/^export function useApiClient() {$/", "language": "TypeScript", "kind": "function"}], "hash": "d0ec4466be1cb2d49022412cc62e1049", "format-version": 4, "code-base-name": "frontend", "filename": "frontend/src/hooks/useApiClient.ts", "revision_history": [{"139": ""}]}